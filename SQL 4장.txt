4장
 정규화는 왜 할까?
 데이터가 많아지면 원하는 데이터 찾기 위한 WHERE절이 복작해짐 > 정규화= 문제해결
SQL = 관계형 데이터베이스
  -> 관계형 데이터베이스인 관리 시스템인  RDBMS 를 위한 언어

정규화
- 공간, 시간적으로 더 효율적인 관계형 데이터베이스를 만들기 위한 기법
  - 중복된 데이터를 최소화하고, 효율적인 색인 가능하게 함
  - 데이터의 무결성(일관성)을 확보
    (제 1정규화~제 6정규화 ->1,2,3일반적)

제 1정규화(1NF)를 위한 조건
 1. 테이블의 각각의 셀에 들어가는 데이터들은 원자적이어야 한다
  - 정보의 단위가 사용(색인)을 위해 적합해야한다는 의미로 뒤에서 언급하는 원자(쪼갤 수 없는 조각)적 데이터 규칙을 만족시켜야 한다.
 2. 각 행은 유일무이한 식별자인 기본키 (Primary Key)를 가지고 있어야 한다.
  - 그래야만이 각 행들간의 서로 다른 정보가 중복되지 않는다는 것을 확신, 기본키 규칙을 만족하여야 한다.

원자적 데이터 (칼럼의 결정)
칼럼의 데이터 결정
 - 데이터의 세부 정도를 정해야 함
     즉, 데이터를 사용하는 최소 의미 단위로 결정하는데 이를 원자라 함 
 - 색인이 자주 일어나는 형태의 자료는 하나의 독립 칼럼화(원자화) 하는 것이 필요
 - 복합된 정보라도 구성 내용을 독립적으로 사용할 것 아니라면 분리할 필요 없다.
     즉, 데이터를 어떠한 용도로 사용할 것인가에 따라 칼럼의 원자성이 결정

예) 두 테이블은 대동소이한 정보를 가지고 있음 그런데 location에 주 이름을 가진 경우가 그렇지 않은 경우를 대비
 - 원자적인지 아닌지는 사용하는 입장에 따라 다름
 - "데이터를 어떻게 사용할 것이가에 대한 결정이 테이블을 어떻게 만들것인지에 영향을 줌"
 (참고) 색인을 위해 LIKE 구문을 사용하는 것은 매우 비효율적임
   -레코드의 수가 적을때는 괜찮으나, 커지면 성능에 영향을 미침

데이터를 원자적으로 만드는 3단계
 1. 테이블이 표현하는 것은 무엇인가?
 2. 그것을 얻기 위해 테이블을 어떻게 사용할 것인가?
 3. 열들은 쿼리를 짧고 명료하게 할 수 있도록 원자적 데이터를 가지고 있는가?
  
원자적 데이터를 위한 규칙 
 1. 원자적 데이터로 구성된 열은 그 열에 같은 종류의 데이터를 여러개 가질수 없다.
  - 하나의 칼럼에 활용하고자 하는 데이터를 여러 개 묶어서 넣는 것은 곤란 하다는 뜻
   예) my_contacts 테이블의 interests 열에는 한 사람에 대한 여러개의 관심사가 동일한 열에 나열 
 2. 원자적 데이터로 구성된 테이블은 같은 타입의 데이터를 여러 열에 가질 수 없다
  - 유사한 내용의 원자적 데이터를 2개 이상의 서로 다른 칼럼에 사용하면 곤란 하다는 뜻
   예) easy_drinks의 테이블에는 칵테일을 구성하는 두개의 원료가 서로 다른 칼럼에 나누어 들어가 있음


기본키 (Primary Key)
의미
 하나의 행을 다른 행과 구별해 줄 수 있는 열
    즉, 기본키는 우리가 원하는 정보의 행을 추출할 수 있는 식별자
 따라서 중복될 수 없다.
    즉, 기본키는 각각의 행마다 다른 것이어야함   
 예) 주민번호, 학번

기본키 규칙
 1. 기본키는 NULL값을 가질 수 없음
   -테이블 생성시 이를 명시 함
 2. 기본키는 레코드 생성시에 값을 가져야 함
  - 아니면 NULL값을 가지게 되어서, 중복의 가능성 생김
 3. 기본키는 간결해야 함
  - 색인 등에 자주 활용하므로 최대한 간결
 4. 기본키의 값은 변경 불가능(하지 않는 것이 좋음)
  - 기본키의 값을 변경할수 있다면 중복의 가능성 생김
  - 특수한 경우 고칠 수 있겠지만 이와 연관된 자료들(다른 테이블)도 수정해야 하는 번거로움 생김
  - 삭제하고 다시 생성하는 것이 더 바람직
  - 이와 같은 제약 조건을 가장 쉽게 해결하는 방안은 기본키 열을 새로 만드는 것(숫자의 일련번호가 일반적)

기본키의 종류
Synthetic Key
  - 유일무이한 Primary Key를 갖기 위해 새롭게 만든 Primary Key
  - 보통은 정수 일련번호를 사용
Natural Key
  - 유일무이한 값을 가지는 테이블의 칼럼(또는 이들의 조합)을 가지고 Primary Key로 사용하면 이를 Natural Key라고 함
테이블을 만들 때 어떤 것이 더 효과적인지에 대해서는 전문가 사이에서도 논란이 있음 

기본키를 포함한 테이블 생성
 해당 칼럼을 NOT NULL로 설정하고 ,PRIMARY KEY 키워드 사용하여 설정
CREATE TABLE my_contacts
(
contacts_id INT NOT NULL, ~ seeking VARCHAR(100) DEFAULT NULL, FRIMARY KEY(contacts_id)
);

자동 증가하는 칼럼
AUTO_INCREMENT 키워드를 칼럼 생성시 추가하면 SQL 소프트웨어가 그 열에 값을 자동으로 채움
  - 자동으로 채우지 않게 값을 줄 수도 있음
  - 자동으로 생성할 때는 현재 있는 값을 최대 값에 1을 더한 값으로 생성
  contacts_id INT NOT NULL AUTO_INCREMENT 










