6장 - 고급 SELECT문
 
고급 UPDATE >>CASE 문
   - UPDATE 문에 CASE 절을 사용하여 여러 조건에 따른 값을 배정할 수 있다.

   - CASE...END 키워드 안에 WHEN(조건)을 사용하고 THEN 이하에 명시된 값 제공
           즉, 조건이 맞을 경우에 해당하는 newvalue가 new_column의 값이 되는 것

   - ELSE의 경우는 WHEN 으로 맞는 조건이 없을 경우의 값을 리턴하기 위해 필요

   - ELSE도 없고 WHEN 조건도 없은 NULL 반환.

     ex) UPDATE my_table 
         SET new_column =
         CASE
            WHEN column1 = somevalue1
               THEN newvalue1  
            WHEN column2 = somevalue2
               THEN newvalue2
            ELSE newvalue3
         END; 
      UPDATE my_table SET new_column = CASE WHEN column1 = somevalue1 THEN newvalue1 
      WHEN column2 = somevalue2 THEN newvalue2 ELSE newvalue3 END; 

  - WHEN 절에 AND 연산자 사용 가능 

  - CASE를 사용하면 (중복이 있다면)
      WHEN에 명시된 순서대로 처음것에 해당하는 문장만 실행된다.
  - 여러개의 UPDATE문은 마지막에 해당하는 문장이 실행된다 
  - WHEN 절에 AND 연산자 사용 가능 

   UPDATE pet SET name = CASE WHEN gender = 'F' AND owner ='원석' THEN '큰개' ELSE '강아지' END;
  - CASE 중첩으로 사용 가능
  - AND를 사용허지 않고 중첩으로 사용 

     UPDATE pet    
     SET name =
     CASE
       WHEN gender = 'F' THEN       
          (CASE WHEN owner ='원석' THEN '큰개' ELSE '작은개' END) 
       ELSE name;
     END;

SELECT와 정렬 >>열정렬
  
  - SELECT로 나오는 결과의 데이터를 정렬하는 방범
     
     ORDER BY를 실행

     SELEC를 실행하고 그 결과를 title 열을 기준으로 정렬(문자열=알파벳순, 숫자=1~)

     SELECT title, category FROM movie_table WHERE category = 'family' ORDER BY title;
 
 - 두개의 열을 이용하여 정렬
     ORDER BY에 두개의 열을 콤마를 사용하여 명시 + 그 이상의 개수의 칼럼 사용 가능
 - ORDER BY 뒤에 나오는 순서 중요
     제일 먼저 나오는 열에 따라 정렬 되고 그 중 같은 것들에 대해서 다음열이 정렬된다
   
     SELECT * FROM movie_table  ORDER BY category, title;

 - WHERE절이 ORDER BY 보다 먼저 나와야 함을 주의
 - GROUP BY 절이 ORDER BY 절 보다 먼저 나와야 함

 -정렬 순서 조정하기(칼럼명 뒤에 명시) 
    ASC(오름차순, default이므로 안써줘도 됨)
    DESC(내림차순)

SELECT와 함수 >>SUM, AVG, MAX, MIN, COUNT 
  - GROUP 함수 
   [ SUM = 합계
     AVG = 평균
     MAX = 가장 큰 수
     MIN = 가장 작은 수 
     COUNT = 해당되는 행의 갯수  ]
  GROUP BY 함수가 적용되는 단위를 정해준다 

  - GROUP BY 사용시의 주의점
      SELECT first_name, sale_date, MAX(sales) FROM cookie_sales GROUP BY first_name;
      sale_date는 의미 없는 값을 반환 한다. 
 
      SELECT first_name, MAX(sales) FROM cookie_sales;
      MAX는 그룹 함수 이며 이경우 전체를 하나의 그룹으로 보고있다. 따라서 first_name은 이함수와 전혀 상관이 없다.
    
      ->SELECT first_name, sales FROM cookie_sales ORDER BY sales DESC LIMIT 1;

SELECT와 함수 >> DISTINCT
    - 칼럼이름 앞에 사용하여 중복되는 것은 하나로 간주하게 할 수 있음
        SELECT DISTINCT sales_date FROM cookie_sales ORDER BY sale_date;

   - 일한 날의 수
        SELECT COUNT(DISTINCT sale_date) FROM cookie_sales ORDER BY sale_date;

SELECT와 함수 >> LIMIT 
  
  - 출력되는 결과의 갯수를 제한 할 수 있음 
    SELECT first_name, sales FROM cookie_sales ORDER BY sales DESC LIMIT 2;
 
  - 범위를 지정해 줄 수 있음 
     SELECT first_name, sales FROM cookie_sales ORDER BY sales DESC LIMIT 0,4;
     - LIMIT 2 (두번째까지 반환)
     - LIMIT 0,4 (인덴스 0에서 부터(처음) 4개만 반환 하라는 의미

































