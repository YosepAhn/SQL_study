 10 장

   셀프조인 
      : 동일한 테이블의 서로 다른 칼럼들을 가지고 조인을 하는 경우를 셀프 조인이라고 한다 
   
   셀프 조인의필요성
      -셀프 조인 동일한 테이블에서 하나의 칼럼이 다른 칼럼을 참조하는 경우 
   
   똑같은 테이블이 두개 있다면
     SELECT c1.name, c2.name as boss 
     FROM clown_info1 AS c1 INNER JOIN clown_info2 AS c2
     ON c1.boss_id = c2.id

   하나의 테이블이라면
    SELECT a.name, b.name AS boss 
    FROM clown-info AS a INNER JOIN clown-info AS b ON c.boss_id=b.id;

   (상관)서브쿼리로 입력
   SELECT a.name, (SELECT b.name FROM clown-info b WHERE a.boss_id=b.id)AS boss FROM clown-info AS a;


  유니온 (UNION)

    여러 테이블에 있는 동종의 내용을 중복없이 한번에 추출할 필요가 있을 경우 활용
  
    my_contacts DB에서 Job_current, job_desired, job_listing에는 title이라는 동종의 자료가 있음
      이를 별도의 테이블로 분리하는 것 필요 
      이들의 내용을 중복없이 다른 테이블에 넣어주려면
     1. 정보 추출
        SELECT title FROM job_current; 
        SELECT title FROM job_desired;
        SELECT title FROM job_listings;

       중복이 있음
       -> 결과들의 집합의 합집합(UNION)을 한다

      SELECT title FROM job_current
      UNION
      SELECT title FROM job_desired
      UNION
      SELECT title FROM job_listings;

     규칙 
     - SELECT 문의 열의 개수는 같아야 함
     - 유니온의 결과는 중복 값이 없음 만약 중복값도 필요하면 UNION ALL사용
     - WHERE 조건은 SELECT 절마다 주어야 함
       ORDER BY 같은 구문은 맨 뒤에 한번만 사용할 수 있음

     ex) 세 테이블엥서 W로 시작하는 직업들만 UNION 한다면 ?

       SELECT title FROM job_current WHERE title LIKE 'W%' 
       UNION
       SELECT title FROM job_desired WHERE title LIKE 'W%'
       UNION
       SELECT title FROM job_listings WHERE title LIKE 'W%' 
       ORDER BY title;

    + MySQL에는 없음
     - INTERSET (두개의 SELECT 결과 공통부분(교집합))

      SELECT title FROM job_current
      INTERSET
      SELECT title FROM job_desired

     쿼리로 표현하여 대체 : SELECT title FROM job_current WHERE title IN(SELECT title FROM job_desired);


     - EXCEPT(두개의 SELECT 결과 다른 부분(차집합)

     SELECT title FROM job_current
     EXCEPT
     SELECT title FROM job_desired

     쿼리로 표현 : SELECT title FROM job_current WHERE title NOT IN(SELECT title FROM job_desired);

    <문제> job_listings에 있는 직업을 구하는 사람들의 이름과 전화번호 그리고 직업을 알고 싶음
      서브 쿼리 사용
      : SELECT first_name, last_name, phone, jc.title FROM my_contacts mc NATURAL JOIN job_current jc WHERE jc.title IN(SELECT title FROM job_listings);

      조인 사용
      : SELECT first_name, last_name, phone, jc.title FROM job_current jc NATURAL JOIN my_contacts 
       INNER JOIN job_listings jl ON jc.title=jl.title;


  11장 (VIEW) 
   
   복잡란 쿼리 문장을 반복해서 입력하고 실행하면 비효율적일 뿐 아니라 에러발생 가능성 높음
   뷰는 마치 새로운 하나의 테이블 처럼 작동하되 우리가 원하는 쿼리의 결과를 담고 있다고 생각하면됨(테이블은 아님)

   뷰(VIEW)의 생성

     Web Designer를 희망하는 사람들의 이름과 전화번호 및 이메일 주소를 알고 싶으면
    서브쿼리
    SELECT first_name, last_name, phone, email FROM my_contacts mc WHERE mc.contact_id IN(SELECT contact_id FROM job_desired WHERE title = 'Web Designer');
    조인
    SELECT first_name, last_name, phone, email FROM my_contacts mc NATURAL JOIN job_desired jd WHERE jd.title = 'Web Designer';

  뷰 만들기

   CREATE VIEW web_designers AS 
   SELECT first_name, last_name, phone, email 
   FROM my_contacts mc NATURAL JOIN job_desired jd  
   WHERE jd.title = 'Web Designer'

  뷰는 마치 테이블 처럼 사용 할수 있음(WHERE 절 등도 사용가능)
   SELECT first_name, phone FROM web_designers;

   뷰를 사용 하면 실제는 서브쿼리를 실행 하는 것임 
   위에 커리는 다음의 커리와 동일
      SELECT *FROM
     (SELECT first_name, last_name, phone, email 
     FROM my_contacts mc NATURAL JOIN job_desired jd 
     WHERE jd.title = 'Web Designer') AS web_designers; 

  뷰의 유용성
     데이터베이스의 구조를 변경하여도 테이블의 의존하는 응용을 변경할 필요가 없음 
     복잡한 쿼리를 단순하게 만듬
     사용자에게 제공할 필요없는 정보를 숨기고 제공할수 있음
 
  뷰에 관한 정보를 보려면
    테이브과 유사하게 취급 하면 된다
    SHOW FULL TABLES;
    DESC 뷰이름 
    DROP VIEW 뷰이름

   + 뷰 가지고 JOIN에 활용 할 수 있음

   
   <문제>현재의 연봉이 평균보다 높은 사람들의 이름과 연봉을 보고 싶다
     (my_contacts와 job_current를 join한 것을 view로 만들어 놓고 활용)

     CREATE VIEW my_current AS
     SELECT first_name, salary FROM my_contacts  NATURAL JOIN job_current;

     SELECT*FROM my_current WHERE selary>=(SELECT AVG(salary) FROM job_current);

  <문제> CA주에 사는 모든 사람의 이름과 직업 (title)및 연봉(salary)을 보고 싶다
    (my_contacts와 zip_code를 join한 것을 view로 만들어 활용)

    CREATE VIEW address AS
    SELECT contact_id, first_name, state FROM my_contacts NATURAL JOIN zip_code;

    SELECT first_name, title, salary FROM address NATURAL JOIN job_current WHERE state = 'CA';


   제약 조건 
   필드에 들어갈수 있는 값을 제약하고자함 

     CREATE VIEW pb_quaters AS SELECT * FROM piggy_bank 
      WHERE coin = ‘Q’ WITH CHECK OPTION;

        INSERT INTO pb_quaters VALUES (NULL, ‘D’, 1987); # 에러 발생
     INSERT INTO pb_quaters VALUES (NULL, ‘Q’, 1990); # 문제 없음

   ‘Q’, ‘D’, ‘N’, ‘P’ 만 입력될 수 있게 하려면?
    CREATE VIEW coins AS SELECT * FROM piggy_bank 
     WHERE coin IN ('Q', 'D', 'N', 'P') WITH CHECK OPTION;

       INSERT INTO pb_quartersVALUES (NULL, 'T', 2022);# 에러발생
    INSERT INTO pb_quartersVALUES (NULL, 'P', 2018);# 문제없음

    뷰를 통해 INSERT 뿐 아니라 DELETE, UPDATE도 가능
  아주 심플한 뷰의 경우에만 입력, 수정, 삭제를 사용가능


  트래잭션

  트랜잭션의 시작
   START TRANSACTION;
 
  트랜잭션의 끝
   COMMIT;  여지까지의 (START TARNSACTION 이후의) 모든 명령어를 반영
 

     ROLLBACK;  여지까지 (START TARNSACTION 이후의) 모든 명령어를 실행안한것처럼 복구







